def  appName = 'service-tracker-ui'
def  feSvcName = "${appName}"
def  ACRPATH = 'hackfest'
def  ACRNAME = 'acrhackfestdonwong13212'
def  ACRURL = 'azurecr.io'
def  imageTag = "${env.BRANCH_NAME}.${env.BUILD_NUMBER}"

pipeline {
  agent {
    kubernetes {
      label 'aks-hackfest'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
# Use service account that can deploy to all namespaces
  serviceAccountName: jenkins
  containers:
  - name: helm
    image: lachlanevenson/k8s-helm:v2.9.1
    command:
    - cat
    tty: true
  - name: azurecli
    image: microsoft/azure-cli:latest
    command:
    - cat
    tty: true
  - name: kubectl
    image: lachlanevenson/k8s-kubectl:latest
    command:
    - cat
    tty: true
"""
}
  }
  stages {

    
    stage('Build Container and Push to Registry') {
      steps {
        container('azurecli') {
        withCredentials([azureServicePrincipal('azurecli')]) {
            sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'
            sh 'az account set -s $AZURE_SUBSCRIPTION_ID'
          sh("az acr build -t ${ACRNAME}.${ACRURL}/${ACRPATH}/${appName}:${imageTag} -r ${ACRNAME} ./app/service-tracker-ui")
        }
      }
     }
    }
    
    stage('Deploy To Production') {
      // Production branch
      steps{
        container('helm') {
        // Uses Help to deploy and sets variables for ACR
          sh("helm upgrade --install service-tracker-ui ./charts/service-tracker-ui --set deploy.imageTag=${imageTag},deploy.acrserver=${ACRNAME}.${ACRNAME}")
          //sh("helm upgrade --install service-tracker-ui ./charts/service-tracker-ui")
          //sh("echo http://`kubectl get service/${feSvcName} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'` > ${feSvcName}")
        }
      }
    }
  }
}
 
